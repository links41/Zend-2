{"ts":1374517815470,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1374517884491,"patch":[[{"diffs":[[1,"<!DOCTYPE html>\n<html>\n<head>\n<title>JavaScript Loan Calculator</title>\n<style> /* This is a CSS style sheet: it adds style to the program output */\n.output { font-weight: bold; } /* Calculated values in bold */\n#payment { text-decoration: underline; } /* For element with id=\"payment\" */\n#graph { border: solid black 1px; } /* Chart has a simple border */\nth, td { vertical-align: top; } /* Don't center table cells */\n</style>\n</head>\n<body>\n<!--\nThis is an HTML table with <input> elements that allow the user to enter data\nand <span> elements in which the program can display its results.\nThese elements have ids like \"interest\" and \"years\". These ids are used\nin the JavaScript code that follows the table. Note that some of the input\nelements define \"onchange\" or \"onclick\" event handlers. These specify strings\nof JavaScript code to be executed when the user enters data or clicks.\n-->\n<table>\n<tr><th>Enter Loan Data:</th>\n<td></td>\n<th>Loan Balance, Cumulative Equity, and Interest Payments</th></tr>\n<tr><td>Amount of the loan ($):</td>\n<td><input id=\"amount\" onchange=\"calculate();\"></td>\n<td rowspan=8>\n<canvas id=\"graph\" width=\"400\" height=\"250\"></canvas></td></tr>\n<tr><td>Annual interest (%):</td>\n<td><input id=\"apr\" onchange=\"calculate();\"></td></tr>\n<tr><td>Repayment period (years):</td>\n<td><input id=\"years\" onchange=\"calculate();\"></td>\n<tr><td>Zipcode (to find lenders):</td>\n<td><input id=\"zipcode\" onchange=\"calculate();\"></td>\n<tr><th>Approximate Payments:</th>\n<td><button onclick=\"calculate();\">Calculate</button></td></tr>\n<tr><td>Monthly payment:</td>\n<td>$<span class=\"output\" id=\"payment\"></span></td></tr>\n<tr><td>Total payment:</td>\n<td>$<span class=\"output\" id=\"total\"></span></td></tr>\n1.2 Client-Side JavaScript | 13\n<tr><td>Total interest:</td>\n<td>$<span class=\"output\" id=\"totalinterest\"></span></td></tr>\n<tr><th>Sponsors:</th><td colspan=2>\nApply for your loan with one of these fine lenders:\n<div id=\"lenders\"></div></td></tr>\n</table>"]],"start1":0,"start2":0,"length1":0,"length2":1978}]],"length":1978,"saved":false}
{"ts":1374517912543,"patch":[[{"diffs":[[0,"tr>\n"],[-1,"1.2 Client-Side JavaScript | 13\n"],[0,"<tr>"]],"start1":1718,"start2":1718,"length1":40,"length2":8}]],"length":1946,"saved":false}
{"ts":1374522317744,"patch":[[{"diffs":[[0,"tr>\n</table>"],[1,"\n<!-- The rest of this example is JavaScript code in the <script> tag below -->\n<!-- Normally, this script would go in the document <head> above but it -->\n<!-- is easier to understand here, after you've seen its HTML context. -->\n<script>\n\"use strict\"; // Use ECMAScript 5 strict mode in browsers that support it\n/*\n* This script defines the calculate() function called by the event handlers\n* in HTML above. The function reads values from <input> elements, calculates\n* loan payment information, displays the results in <span> elements. It also\n* saves the user's data, displays links to lenders, and draws a chart.\n*/\nfunction calculate() {\n// Look up the input and output elements in the document\nvar amount = document.getElementById(\"amount\");\nvar apr = document.getElementById(\"apr\");\nvar years = document.getElementById(\"years\");\nvar zipcode = document.getElementById(\"zipcode\");\nvar payment = document.getElementById(\"payment\");\nvar total = document.getElementById(\"total\");\nvar totalinterest = document.getElementById(\"totalinterest\");\n// Get the user's input from the input elements. Assume it is all valid.\n// Convert interest from a percentage to a decimal, and convert from\n// an annual rate to a monthly rate. Convert payment period in years\n// to the number of monthly payments.\nvar principal = parseFloat(amount.value);\nvar interest = parseFloat(apr.value) / 100 / 12;\nvar payments = parseFloat(years.value) * 12;\n// Now compute the monthly payment figure.\nvar x = Math.pow(1 + interest, payments); // Math.pow() computes powers\nvar monthly = (principal*x*interest)/(x-1);\n// If the result is a finite number, the user's input was good and\n// we have meaningful results to display\nif (isFinite(monthly)) {\n// Fill in the output fields, rounding to 2 decimal places\npayment.innerHTML = monthly.toFixed(2);\ntotal.innerHTML = (monthly * payments).toFixed(2);\ntotalinterest.innerHTML = ((monthly*payments)-principal).toFixed(2);\n// Save the user's input so we can restore it the next time they visit\nsave(amount.value, apr.value, years.value, zipcode.value);\n// Advertise: find and display local lenders, but ignore network errors\ntry { // Catch any errors that occur within these curly braces\ngetLenders(amount.value, apr.value, years.value, zipcode.value);\n}\ncatch(e) { /* And ignore those errors */ }\n// Finally, chart loan balance, and interest and equity payments\nchart(principal, interest, monthly, payments);\n}\nelse {\n// Result was Not-a-Number or infinite, which means the input was\n// incomplete or invalid. Clear any previously displayed output.\npayment.innerHTML = \"\"; // Erase the content of these elements\ntotal.innerHTML = \"\"\ntotalinterest.innerHTML = \"\";\nchart(); // With no arguments, clears the chart\n}\n}\n// Save the user's input as properties of the localStorage object. Those\n// properties will still be there when the user visits in the future\n// This storage feature will not work in some browsers (Firefox, e.g.) if you\n// run the example from a local file:// URL. It does work over HTTP, however.\nfunction save(amount, apr, years, zipcode) {\nif (window.localStorage) { // Only do this if the browser supports it\nlocalStorage.loan_amount = amount;\nlocalStorage.loan_apr = apr;\nlocalStorage.loan_years = years;\nlocalStorage.loan_zipcode = zipcode;\n}\n}\n// Automatically attempt to restore input fields when the document first loads.\nwindow.onload = function() {\n// If the browser supports localStorage and we have some stored data\nif (window.localStorage && localStorage.loan_amount) {\ndocument.getElementById(\"amount\").value = localStorage.loan_amount;\ndocument.getElementById(\"apr\").value = localStorage.loan_apr;\ndocument.getElementById(\"years\").value = localStorage.loan_years;\ndocument.getElementById(\"zipcode\").value = localStorage.loan_zipcode;\n}\n};\n// Pass the user's input to a server-side script which can (in theory) return\n// a list of links to local lenders interested in making loans. This example\n// does not actually include a working implementation of such a lender-finding\n// service. But if the service existed, this function would work with it.\nfunction getLenders(amount, apr, years, zipcode) {\n// If the browser does not support the XMLHttpRequest object, do nothing\nif (!window.XMLHttpRequest) return;\n// Find the element to display the list of lenders in\nvar ad = document.getElementById(\"lenders\");\nif (!ad) return; // Quit if no spot for output\n// Encode the user's input as query parameters in a URL\nvar url = \"getLenders.php\" + // Service url plus\n\"?amt=\" + encodeURIComponent(amount) + // user data in query string\n\"&apr=\" + encodeURIComponent(apr) +\n\"&yrs=\" + encodeURIComponent(years) +\n\"&zip=\" + encodeURIComponent(zipcode);\n// Fetch the contents of that URL using the XMLHttpRequest object\nvar req = new XMLHttpRequest(); // Begin a new request\nreq.open(\"GET\", url); // An HTTP GET request for the url\nreq.send(null); // Send the request with no body\n// Before returning, register an event handler function that will be called\n// at some later time when the HTTP server's response arrives. This kind of\n// asynchronous programming is very common in client-side JavaScript.\nreq.onreadystatechange = function() {\nif (req.readyState == 4 && req.status == 200) {\n// If we get here, we got a complete valid HTTP response\nvar response = req.responseText; // HTTP response as a string\nvar lenders = JSON.parse(response); // Parse it to a JS array\n// Convert the array of lender objects to a string of HTML\nvar list = \"\";\nfor(var i = 0; i < lenders.length; i++) {\nlist += \"<li><a href='\" + lenders[i].url + \"'>\" +\nlenders[i].name + \"</a>\";\n}\n// Display the HTML in the element from above.\nad.innerHTML = \"<ul>\" + list + \"</ul>\";\n}\n}\n}\n// Chart monthly loan balance, interest and equity in an HTML <canvas> element.\n// If called with no arguments then just erase any previously drawn chart.\nfunction chart(principal, interest, monthly, payments) {\nvar graph = document.getElementById(\"graph\"); // Get the <canvas> tag\ngraph.width = graph.width; // Magic to clear and reset the canvas element\n// If we're called with no arguments, or if this browser does not support\n// graphics in a <canvas> element, then just return now.\nif (arguments.length == 0 || !graph.getContext) return;\n// Get the \"context\" object for the <canvas> that defines the drawing API\nvar g = graph.getContext(\"2d\"); // All drawing is done with this object\nvar width = graph.width, height = graph.height; // Get canvas size\n// These functions convert payment numbers and dollar amounts to pixels\nfunction paymentToX(n) { return n * width/payments; }\nfunction amountToY(a) { return height-(a * height/(monthly*payments*1.05));}\n// Payments are a straight line from (0,0) to (payments, monthly*payments)\ng.moveTo(paymentToX(0), amountToY(0)); // Start at lower left\ng.lineTo(paymentToX(payments), // Draw to upper right\namountToY(monthly*payments));\ng.lineTo(paymentToX(payments), amountToY(0)); // Down to lower right\ng.closePath(); // And back to start\ng.fillStyle = \"#f88\"; // Light red\ng.fill(); // Fill the triangle\ng.font = \"bold 12px sans-serif\"; // Define a font\ng.fillText(\"Total Interest Payments\", 20,20); // Draw text in legend\n// Cumulative equity is non-linear and trickier to chart\nvar equity = 0;\ng.beginPath(); // Begin a new shape\ng.moveTo(paymentToX(0), amountToY(0)); // starting at lower-left\nfor(var p = 1; p <= payments; p++) {\n// For each payment, figure out how much is interest\nvar thisMonthsInterest = (principal-equity)*interest;\nequity += (monthly - thisMonthsInterest); // The rest goes to equity\ng.lineTo(paymentToX(p),amountToY(equity)); // Line to this point\n}\ng.lineTo(paymentToX(payments), amountToY(0)); // Line back to X axis\ng.closePath(); // And back to start point\ng.fillStyle = \"green\"; // Now use green paint\ng.fill(); // And fill area under curve\ng.fillText(\"Total Equity\", 20,35); // Label it in green\n// Loop again, as above, but chart loan balance as a thick black line\nvar bal = principal;\ng.beginPath();\ng.moveTo(paymentToX(0),amountToY(bal));\nfor(var p = 1; p <= payments; p++) {\nvar thisMonthsInterest = bal*interest;\nbal -= (monthly - thisMonthsInterest); // The rest goes to equity\ng.lineTo(paymentToX(p),amountToY(bal)); // Draw line to this point\n}\ng.lineWidth = 3; // Use a thick line\ng.stroke(); // Draw the balance curve\ng.fillStyle = \"black\"; // Switch to black text\ng.fillText(\"Loan Balance\", 20,50); // Legend entry\n// Now make yearly tick marks and year numbers on X axis\ng.textAlign=\"center\"; // Center text over ticks\nvar y = amountToY(0); // Y coordinate of X axis\nfor(var year=1; year*12 <= payments; year++) { // For each year\nvar x = paymentToX(year*12); // Compute tick position\ng.fillRect(x-0.5,y-3,1,3); // Draw the tick\nif (year == 1) g.fillText(\"Year\", x, y-5); // Label the axis\nif (year % 5 == 0 && year*12 !== payments) // Number every 5 years\ng.fillText(String(year), x, y-5);\n}\n// Mark payment amounts along the right edge\ng.textAlign = \"right\"; // Right-justify text\ng.textBaseline = \"middle\"; // Center it vertically\nvar ticks = [monthly*payments, principal]; // The two points we'll mark\nvar rightEdge = paymentToX(payments); // X coordinate of Y axis\nfor(var i = 0; i < ticks.length; i++) { // For each of the 2 points\nvar y = amountToY(ticks[i]); // Compute Y position of tick\ng.fillRect(rightEdge-3, y-0.5, 3,1); // Draw the tick mark\ng.fillText(String(ticks[i].toFixed(0)), // And label it.\nrightEdge-5, y);\n}\n}\n</script>\n</body>\n</html>"]],"start1":1934,"start2":1934,"length1":12,"length2":9455}]],"length":11389,"saved":false}
